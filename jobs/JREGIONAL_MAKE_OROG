#!/bin/bash

#
#-----------------------------------------------------------------------
#
# Source the variable definitions file and the bash utility functions.
#
#-----------------------------------------------------------------------
#
. ${GLOBAL_VAR_DEFNS_FP}
. $USHdir/source_util_funcs.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u -x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that generates orography files.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job.
#
#-----------------------------------------------------------------------
#
${SCRIPTSdir}/exregional_make_orog.sh
export err=$?; err_chk
#
#-----------------------------------------------------------------------
#
# Create a flag file to make rocoto aware that the make_orog task has 
# successfully completed (so that other tasks that depend on it can be
# launched).  
#
# Although we can use the <taskdep> tag to make other tasks depend on 
# the successful completion of make_orog, it turns out that the <task-
# dep> tag assumes that the task it specifies (in this case make_orog)
# runs for the same set of cycles as the one in which it appears as a 
# dependency.  Thus, if we use <taskdep> in a cycle-dependent task in 
# the workflow to make it depend on the make_orog, then the workflow 
# will wait for make_orog to run for each cycle for which that cycle-de-
# pendent task is defined before running the task.  But since make_orog
# will not run for each cycle (except possibly for the very first one),
# the cycle-dependent task will not be able to run for any of the cycles
# except the first one.  For this reason, we cannot use the <taskdep> 
# tag to make other cycle-dependent tasks depend on make_orog and must
# instead use a flag file.
#
#-----------------------------------------------------------------------
#
touch "${LOG_BASEDIR}/make_orog_task_complete.txt"
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/function.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

