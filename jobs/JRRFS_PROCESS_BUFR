#!/bin/bash

#-----------------------------------------------------------------------
# RRFS BUFR Preprocessing
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Specify Execution Areas
#-----------------------------------------------------------------------

export EXECrrfs=${EXECrrfs:-${HOMErrfs}/exec}
export FIXrrfs=${FIXrrfs:-${HOMErrfs}/fix}
export PARMrrfs=${PARMrrfs:-${HOMErrfs}/parm}
export USHrrfs=${USHrrfs:-${HOMErrfs}/ush}

export FIX_GSI=${FIXrrfs}/gsi

#-----------------------------------------------------------------------
# Source the variable definitions file and the bash utility functions.
#-----------------------------------------------------------------------

. ${GLOBAL_VAR_DEFNS_FP}
. $USHrrfs/source_util_funcs.sh

date
export PS4='+ $SECONDS + '

#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------

{ save_shell_opts; set -u -x; } > /dev/null 2>&1

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs a BUFR preprocess for 
the specified cycle.
========================================================================"

#-----------------------------------------------------------------------
# Obtain unique process id (pid) and create the run directory (DATA).
#-----------------------------------------------------------------------

export pid=${pid:-$$}
export RUN=${RUN:-rrfs}

if [ "${CYCLE_TYPE}" = "spinup" ]; then
  export jobid=${RUN}_process_bufr_spinup_${envir}_${cyc}
  if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
    export jobid=${RUN}_process_bufr_spinup_enkf_${envir}_${cyc}
  fi
else
  export jobid=${RUN}_process_bufr_${envir}_${cyc}
  if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
    export jobid=${RUN}_process_bufr_enkf_${envir}_${cyc}
  fi
fi

export DATA=${DATAROOT}/${jobid}
mkdir -p ${DATA}
cd ${DATA}

#-----------------------------------------------------------------------
# Define COM directories
#-----------------------------------------------------------------------

if [ "${CYCLE_TYPE}" = "spinup" ]; then
  export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc}_spinup)}
else
  export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc})}
fi
mkdir -p "${COMOUT}"

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

export pgmout="${DATA}/OUTPUT.$$"
env

${HOMErrfs}/scripts/exrrfs_process_bufr.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

if [ "${KEEPDATA}" = "NO" ]; then
  rm -rf ${DATA}
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"

#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------

{ restore_shell_opts; } > /dev/null 2>&1

