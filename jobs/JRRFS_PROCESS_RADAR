#!/bin/bash

date
export PS4='+ $SECONDS + ' 
set -xue

#-----------------------------------------------------------------------
# Specify Package Location
#-----------------------------------------------------------------------
export NET='rrfs'
export MACHINE="WCOSS2"
export WORKFLOW_MANAGER="ecflow"
export HOMErrfs=${HOMErrfs:-""}
export EXECrrfs=${EXECrrfs:-${HOMErrfs}/exec}
export FIXrrfs=${FIXrrfs:-${HOMErrfs}/fix}
export PARMrrfs=${PARMrrfs:-${HOMErrfs}/parm}
export USHrrfs=${USHrrfs:-${HOMErrfs}/ush}
export FIXam=${FIXam:-${HOMErrfs}/fix/am}
export FIXLAM=${FIXLAM:-${HOMErrfs}/fix/lam/RRFS_NA_3km}
export FIX_GSI="${FIXrrfs}/gsi"
export OBSPATH_NSSLMOSIAC="${DCOMROOT}/ldmdata/obs/upperair/mrms/conus/MergedReflectivityQC"

#-----------------------------------------------------------------------
# RRFS Radar Reflectivity Preprocessing
#-----------------------------------------------------------------------
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
case "${WGF}" in
  "det")
    export RUN="rrfs"
    ;;
  "enkf")
    export RUN="enkfrrfs"
    ;;
  "ensf")
    export RUN="refs"
    ;;
  "firewx")
    export RUN="firewx"
    ;;
esac
#-----------------------------------------------------------------------
# Define umbrella data directories
#-----------------------------------------------------------------------
export COMrrfs=${COMrrfs:-$(compath.py -o ${NET}/${rrfs_ver})}
export CYCLE_TYPE=${CYCLE_TYPE:-prod}
if [ "${CYCLE_TYPE}" = "spinup" ]; then
  export umbrella_init_data=${umbrella_init_data:-${DATAROOT}/rrfs_init_spinup_${cyc}_${rrfs_ver}/${WGF}}
else
  export umbrella_init_data=${umbrella_init_data:-${DATAROOT}/rrfs_init_${cyc}_${rrfs_ver}/${WGF}}
fi
export shared_output_data=${umbrella_init_data}/output

#-----------------------------------------------------------------------
# Define data directories
#-----------------------------------------------------------------------
export DATA=${DATA:-${umbrella_init_data}/${jobid}}
mkdir -p ${DATA} ${shared_output_data}
cd ${DATA}

#-----------------------------------------------------------------------
# Set PDY; define and make COMOUT_ANALYSIS directories
#------------------------i----------------------------------------------
export cycle="t${cyc}z"
setpdy.sh
. ./PDY
export CDATE="${PDY}${cyc}"

if [ "${CYCLE_TYPE}" = "spinup" ]; then
  export COMOUT_ANALYSIS=${COMrrfs}/${RUN}.${PDY}/${cyc}_spinup/analysis
else
  export COMOUT_ANALYSIS=${COMrrfs}/${RUN}.${PDY}/${cyc}/analysis
fi
mkdir -p ${COMOUT_ANALYSIS}

#-----------------------------------------------------------------------
# Source the bash utility functions.
#-----------------------------------------------------------------------

. $USHrrfs/source_util_funcs.sh

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs the radar reflectivity 
preprocessing with RRFS for the specified cycle.
========================================================================"

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

export pgmout="${DATA}/OUTPUT.$$"
env

${HOMErrfs}/scripts/exrrfs_process_radar.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
