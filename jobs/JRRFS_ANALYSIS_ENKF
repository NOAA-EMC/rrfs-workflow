#!/bin/bash

date
export PS4='+ $SECONDS + '
set -xue

#-----------------------------------------------------------------------
# RRFS EnKF Update
#-----------------------------------------------------------------------
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
export NET=${NET:-rrfs}

if [ $WGF = "enkf" ] || [ $WGF = "ensf" ]; then
  export RUN="enkfrrfs"
fi
export CYCLE_TYPE=${CYCLE_TYPE:-prod}
if [ "${CYCLE_TYPE}" == "spinup" ]; then
  export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc}_spinup)}
  export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_spinup_${cyc}_${rrfs_ver}/${WGF}
else
  export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc})}
  export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_${cyc}_${rrfs_ver}/${WGF}
fi
  
export FORECAST_INPUT_PRODUCT=${umbrella_forecast_data}
#-----------------------------------------------------------------------
# Define data directories
#-----------------------------------------------------------------------
export DATA=${DATA:-${DATAROOT}/${jobid}}
mkdir -p ${DATA}
cd ${DATA}

#-----------------------------------------------------------------------
# Source the variable definitions file
#-----------------------------------------------------------------------

. ${HOMErrfs}/ush/rrfs_nco_config.sh

#-----------------------------------------------------------------------
# Specify Execution Areas
#-----------------------------------------------------------------------

export EXECrrfs=${EXECrrfs:-${HOMErrfs}/exec}
export FIXrrfs=${FIXrrfs:-${HOMErrfs}/fix}
export PARMrrfs=${PARMrrfs:-${HOMErrfs}/parm}
export USHrrfs=${USHrrfs:-${HOMErrfs}/ush}
export FIX_GSI=${FIXrrfs}/gsi

#-----------------------------------------------------------------------
# Source the bash utility functions.
#-----------------------------------------------------------------------

. $USHrrfs/source_util_funcs.sh

#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------

{ save_shell_opts; set -u -x; } > /dev/null 2>&1

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs the EnKF updates for the 
specified cycle.
========================================================================"

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

export pgmout="${DATA}/OUTPUT.$$"
env

$HOMErrfs/scripts/exrrfs_analysis_enkf.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

if [ "${KEEPDATA}" = "NO" ]; then
  rm -rf ${DATA}
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"

#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------

{ restore_shell_opts; } > /dev/null 2>&1

