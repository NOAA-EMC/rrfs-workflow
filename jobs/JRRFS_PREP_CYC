#!/bin/bash

date
export PS4='+ $SECONDS + ' 
set -xue

#-----------------------------------------------------------------------
# Specify Package Location
#-----------------------------------------------------------------------
export NET='rrfs'
export MACHINE="WCOSS2"
export WORKFLOW_MANAGER="ecflow"
export HOMErrfs=${HOMErrfs:-""}
export EXECrrfs=${EXECrrfs:-${HOMErrfs}/exec}
export FIXrrfs=${FIXrrfs:-${HOMErrfs}/fix}
export PARMrrfs=${PARMrrfs:-${HOMErrfs}/parm}
export USHrrfs=${USHrrfs:-${HOMErrfs}/ush}
export FIXam=${FIXam:-${HOMErrfs}/fix/am}
export FIXLAM=${FIXLAM:-${HOMErrfs}/fix/lam/RRFS_NA_3km}
export FIX_GSI="${FIXrrfs}/gsi"
export GVF_ROOT="${DCOMROOT}/viirs"
export COMINobsproc="${COMINobsproc:-$(compath.py obsproc/${obsproc_ver})}"
#-----------------------------------------------------------------------
# RRFS Prep Cyc
#-----------------------------------------------------------------------
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
case "${WGF}" in
  "det")
    export RUN="rrfs"
    ;;
  "enkf")
    export RUN="enkfrrfs"
    ;;
  "ensf")
    export RUN="refs"
    ;;
  "firewx")
    export RUN="firewx"
    ;;
esac
if [ $WGF = "enkf" ] || [ $WGF = "ensf" ]; then
  if [ ${MEMBER_NAME} = "ensmean" ] ; then
    export ENSMEM_INDX='001'
  else
    export ENSMEM_INDX=${MEMBER_NAME}
  fi
  export mem_num=m$(echo "${ENSMEM_INDX}")
  export DO_ENSEMBLE="TRUE"
else
  export ENSMEM_INDX=""
  export mem_num=""
  export DO_ENSEMBLE="FALSE"
fi
if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
  export umbrella_ics_data=${umbrella_ics_data:-${DATAROOT}/rrfs_ics_${cyc}_${rrfs_ver}/${WGF}/${mem_num}}
else
  export umbrella_ics_data=${umbrella_ics_data:-${DATAROOT}/rrfs_ics_${cyc}_${rrfs_ver}/${WGF}}
fi
export shared_output_data_ics=${umbrella_ics_data}/ics

#-----------------------------------------------------------------------
# Define data directories
#-----------------------------------------------------------------------
export DATA=${DATA:-${DATAROOT}/${jobid}}
mkdir -p ${DATA}
cd ${DATA}

export cycle="t${cyc}z"
setpdy.sh
. ./PDY
export CDATE="${PDY}${cyc}"

#-----------------------------------------------------------------------
# Source the bash utility functions.
#-----------------------------------------------------------------------

. $USHrrfs/source_util_funcs.sh

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the prep_cyc tasks for the specified cycle.
========================================================================"
export CYCLE_TYPE=${CYCLE_TYPE:-prod}
export CYCLE_SUBTYPE=${CYCLE_SUBTYPE:-empty}

####export gridspec_dir=${GESROOT}/grid_spec
####export MAILTO="${MAILTO:-}"

#-----------------------------------------------------------------------
# Define COM directories
#-----------------------------------------------------------------------
export COMrrfs=${COMrrfs:-$(compath.py -o ${NET}/${rrfs_ver})}
export COMOUT=${COMOUT:-${COMrrfs}/${RUN}.${PDY}/${cyc}}
if [ "${CYCLE_TYPE}" = "spinup" ]; then
  export COMOUT=${COMOUT}_spinup
  export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_spinup_${cyc}_${rrfs_ver}/${WGF}
else
  export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_${cyc}_${rrfs_ver}/${WGF}
fi
if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
  if [ ${MEMBER_NAME} = "ensmean" ] ; then
    export COMOUT=${COMOUT}/${MEMBER_NAME}
  else
    export COMOUT=${COMOUT}/${mem_num}
  fi
  if [ "${CYCLE_TYPE}" = "spinup" ]; then
    if [ ${MEMBER_NAME} = "ensmean" ] ; then
      export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_spinup_${cyc}_${rrfs_ver}/${WGF}/${MEMBER_NAME}
    else
      export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_spinup_${cyc}_${rrfs_ver}/${WGF}/${mem_num}
    fi
  else
    if [ ${MEMBER_NAME} = "ensmean" ] ; then
      export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_${cyc}_${rrfs_ver}/${WGF}/${MEMBER_NAME}
    else
      export umbrella_forecast_data=${DATAROOT}/rrfs_forecast_${cyc}_${rrfs_ver}/${WGF}/${mem_num}
    fi
  fi
fi
export FORECAST_INPUT_PRODUCT=${umbrella_forecast_data}/INPUT
[[ -d ${FORECAST_INPUT_PRODUCT} ]]&& rm -rf ${FORECAST_INPUT_PRODUCT}
mkdir -p ${COMOUT} ${FORECAST_INPUT_PRODUCT}

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

export pgmout="${DATA}/OUTPUT.$$"
env

${HOMErrfs}/scripts/exrrfs_prep_cyc.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
