#!/bin/bash

date
export PS4='+ $SECONDS + ' 
set -xue

#-----------------------------------------------------------------------
# RRFS Forecast
#-----------------------------------------------------------------------
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
export RUN=${RUN:-rrfs}

if [ $WGF = "enkf" ] || [ $WGF = "ensf" ]; then
  export ENSMEM_INDX=${MEMBER_NAME}
  export mem_num=m$(echo "${ENSMEM_INDX}")
  export DO_ENSEMBLE="TRUE"
else
  export ENSMEM_INDX=""
  export mem_num=""
  export DO_ENSEMBLE="FALSE"
fi

case $WGF in
  det)
    COM_WGF="rrfs"
    ;;
  enkf)
    COM_WGF="enkfrrfs"
    ;;
  ensf)
    COM_WGF="refs"
    ;;
  firewx)
    COM_WGF="firewx"
    ;;
esac

#-----------------------------------------------------------------------
# Define the umbrella data and COM directories.
# Create the INPUT and RESTART directories under the run directory.
#-----------------------------------------------------------------------
export CYCLE_TYPE=${CYCLE_TYPE:-prod}
export CYCLE_SUBTYPE=${CYCLE_SUBTYPE:-empty}
export COMrrfs=${COMrrfs:-$(compath.py -o rrfs/${rrfs_ver})}
export COMOUT=${COMrrfs}/${COM_WGF}.${PDY}/${cyc}
export umbrella_forecast_data=${DATAROOT}/${RUN}_forecast_${cyc}_${rrfs_ver}/${WGF}
if [ ${CYCLE_TYPE} = "spinup" ]; then
  export COMOUT=${COMrrfs}/${COM_WGF}.${PDY}/${cyc}_spinup
  export umbrella_forecast_data=${DATAROOT}/${RUN}_forecast_spinup_${cyc}_${rrfs_ver}/${WGF}
  if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
    export COMOUT=${COMrrfs}/${COM_WGF}.${PDY}/${cyc}_spinup/${mem_num}
    export umbrella_ics_data="${DATAROOT}/${RUN}_ics_${cyc}_${rrfs_ver}/${WGF}/${mem_num}/ics"
    export umbrella_forecast_data=${DATAROOT}/${RUN}_forecast_spinup_${cyc}_${rrfs_ver}/${WGF}/${mem_num}
  else
    export umbrella_ics_data="${DATAROOT}/${RUN}_ics_${cyc}_${rrfs_ver}/${WGF}/ics"
  fi
else
  if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
    export COMOUT=${COMrrfs}/${COM_WGF}.${PDY}/${cyc}/${mem_num}
    export umbrella_ics_data="${DATAROOT}/${RUN}_ics_${cyc}_${rrfs_ver}/${WGF}/${mem_num}/ics"
    export umbrella_forecast_data=${DATAROOT}/${RUN}_forecast_${cyc}_${rrfs_ver}/${WGF}/${mem_num}
  else
    export umbrella_ics_data="${DATAROOT}/${RUN}_ics_${cyc}_${rrfs_ver}/${WGF}/ics"
  fi
fi
export FORECAST_INPUT_PRODUCT=${umbrella_forecast_data}/INPUT
export shared_forecast_output_data=${umbrella_forecast_data}/output
export shared_forecast_restart_data=${umbrella_forecast_data}/RESTART
export DATA=${DATA:-${umbrella_forecast_data}/${jobid}}
mkdir -p ${COMOUT}/forecast/RESTART ${DATA}/INPUT ${DATA}/RESTART ${shared_forecast_output_data} ${shared_forecast_restart_data}
cd ${DATA}
export umbrella_post_data=${DATAROOT}/${RUN}_post_${cyc}_${rrfs_ver}/${WGF}
[[ -d ${umbrella_post_data} ]]&& rm -rf ${umbrella_post_data}
#-----------------------------------------------------------------------
# Source the variable definitions file
#-----------------------------------------------------------------------

. ${HOMErrfs}/ush/rrfs_nco_config.sh

#-----------------------------------------------------------------------
# Specify Execution Areas
#-----------------------------------------------------------------------

export EXECrrfs=${EXECrrfs:-${HOMErrfs}/exec}
export FIXrrfs=${FIXrrfs:-${HOMErrfs}/fix}
export PARMrrfs=${PARMrrfs:-${HOMErrfs}/parm}
export USHrrfs=${USHrrfs:-${HOMErrfs}/ush}
export FIXam=${FIXam:-${FIXrrfs}/am}
export FIX_SMOKE_DUST=${FIXrrfs}/smoke_dust

#-----------------------------------------------------------------------
# Source the bash utility functions.
#-----------------------------------------------------------------------

. $USHrrfs/source_util_funcs.sh

#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------

{ save_shell_opts; set -u -x; } > /dev/null 2>&1

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs a forecast with FV3 for 
the specified cycle.
========================================================================"

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

export pgmout="${DATA}/OUTPUT.$$"
env

$HOMErrfs/scripts/exrrfs_forecast.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"

#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------

{ restore_shell_opts; } > /dev/null 2>&1

