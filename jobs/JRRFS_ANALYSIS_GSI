#!/bin/bash

#-----------------------------------------------------------------------
# RRFS Analysis
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Specify Execution Areas
#-----------------------------------------------------------------------

export EXECrrfs=${EXECrrfs:-${HOMErrfs}/exec}
export FIXrrfs=${FIXrrfs:-${HOMErrfs}/fix}
export PARMrrfs=${PARMrrfs:-${HOMErrfs}/parm}
export USHrrfs=${USHrrfs:-${HOMErrfs}/ush}

export FIX_GSI=${FIXrrfs}/gsi
export FIX_CRTM=${CRTM_FIX}	# CRTM_FIX is from CRTM module

#-----------------------------------------------------------------------
# Source the variable definitions file and the bash utility functions.
#-----------------------------------------------------------------------

. ${GLOBAL_VAR_DEFNS_FP}
. $USHrrfs/source_util_funcs.sh

date
export PS4='+ $SECONDS + '

#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------

{ save_shell_opts; set -u -x; } > /dev/null 2>&1

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs an analysis with RRFS
for the specified cycle.
========================================================================"

#-----------------------------------------------------------------------
# Obtain unique process id (pid) and create the run directory (DATA).
#-----------------------------------------------------------------------

export pid=${pid:-$$}
export RUN=${RUN:-rrfs}

export mem_num=m$(echo "${ENSMEM_INDX}")

export CYCLE_TYPE=${CYCLE_TYPE:-prod}
export observer_nwges_dir=""

if [ "${CYCLE_TYPE}" = "spinup" ]; then
  workname="gsi_spinup"
else
  workname="gsi"
fi

if [[ ! -v OB_TYPE ]]; then
  OB_TYPE="conv"
fi
if [ "${GSI_TYPE}" = "OBSERVER" ]; then
  if [ "${MEM_TYPE}" = "MEAN" ]; then
    export jobid=${RUN}_observer_${workname}_ensmean_${envir}_${cyc}
    observer_nwges_dir="${GESROOT}/ensmean/observer_${workname}"
  else
# GSI_TYPE = OBSERVER is only for EnKF (ensemble forecasts do not have ANALYSIS tasks)
    export jobid=${RUN}_observer_${workname}_${mem_num}_${envir}_${cyc}
    observer_nwges_dir="${GESROOT}/${RUN}.${PDY}/${cyc}/${mem_num}/observer_${workname}"
  fi
  mkdir -p ${observer_nwges_dir}
else	# For control member, GSI_TYPE is always ANALYSIS
  export jobid=${RUN}_analysis_${OB_TYPE}_${workname}_${envir}_${cyc}
fi

export DATA=${DATAROOT}/${jobid}
rm -fr ${DATA}
mkdir -p ${DATA}
cd ${DATA}

if [ ! -d "${SATBIAS_DIR}" ]; then
  echo "making satbias_dir directory for cycling bias correction files" 
  mkdir -p ${SATBIAS_DIR}
fi

# Folder for storing EnKF related satbias files
if [ "${GSI_TYPE}" = "OBSERVER" ]; then
  if [ "${MEM_TYPE}" = "MEAN" ]; then
    if [ ! -d "${SATBIAS_DIR}_ensmean" ]; then
      echo "making satbias_dir ensmean directory for cycling bias correction files" 
      mkdir -p ${SATBIAS_DIR}_ensmean
    fi    	  
  fi
fi

export gridspec_dir=${GESROOT}/grid_spec

export ${OB_TYPE}

#-----------------------------------------------------------------------
# Define COM directories
#-----------------------------------------------------------------------

if [ "${CYCLE_TYPE}" = "spinup" ]; then
  if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
    export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc}_spinup/${mem_num})}
  else
    export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc}_spinup)}
  fi
else
  if [ "${MEM_TYPE}" = "MEAN" ]; then
    export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc}/ensmean)}
  else
    if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
      export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc}/${mem_num})}
    else
      export COMOUT=${COMOUT:-$(compath.py -o ${NET}/${rrfs_ver}/${RUN}.${PDY}/${cyc})}
    fi
  fi
fi
mkdir -p "${COMOUT}"

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

export pgmout="${DATA}/OUTPUT.$$"
env

$HOMErrfs/scripts/exrrfs_analysis_gsi.sh
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

if [ "${KEEPDATA}" = "NO" ]; then
  rm -rf ${DATA} 
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"

#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------

{ restore_shell_opts; } > /dev/null 2>&1

