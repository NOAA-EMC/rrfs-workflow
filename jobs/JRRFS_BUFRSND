#!/bin/bash

#-----------------------------------------------------------------------
# RRFS Bufr Sounding
#-----------------------------------------------------------------------
                      .                                             .
#-----------------------------------------------------------------------
# Source the variable definitions file and the bash utility functions.
#-----------------------------------------------------------------------

. ${GLOBAL_VAR_DEFNS_FP}
. $USHdir/source_util_funcs.sh

date
export PS4='+ $SECONDS + '

#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------

{ save_shell_opts; set -u -x; } > /dev/null 2>&1

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs the bufr sounding
on the output files corresponding to a specified forecast hour.
========================================================================"

#-----------------------------------------------------------------------
# Obtain unique process id (pid) and create the run directory (DATA).
#-----------------------------------------------------------------------

export pid=${pid:-$$}
export envir=${envir:-prod}
export RUN=${RUN:-rrfs}

export mem_num=m$(echo "${ENSMEM_INDX}")

CYCLE_TYPE=${CYCLE_TYPE:-prod}
if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
  INPUT_DATA="${DATAROOT}/${RUN}_forecast_${mem_num}_${envir}_${cyc}"
  NWGES_DIR="${GESROOT}/${RUN}.${PDY}/${cyc}/${mem_num}/forecast"
  export jobid=${RUN}_bufrsnd_${mem_num}_${envir}_${cyc}
else
  INPUT_DATA="${DATAROOT}/${RUN}_forecast_${envir}_${cyc}"
  NWGES_DIR="${GESROOT}/${RUN}.${PDY}/${cyc}/forecast"
  export jobid=${RUN}_bufrsnd_${envir}_${cyc}
fi

mkdir -p "${NWGES_DIR}/RESTART"
mkdir -p "${NWGES_DIR}/INPUT"

export DATA=${DATAROOT}/${jobid}
rm -rf ${DATA}
mkdir -p ${DATA}
cd ${DATA}

#-----------------------------------------------------------------------
# Define COM directories
#-----------------------------------------------------------------------

if [ "${DO_ENSEMBLE}" = "TRUE" ]; then
  export COMOUT="${COMOUT_BASEDIR}/$RUN.$PDY/$cyc/${mem_num}"
else
  export COMOUT="${COMOUT_BASEDIR}/$RUN.$PDY/$cyc"
fi
mkdir -p "${COMOUT}"

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

fhr=01

export pgmout="${DATA}/OUTPUT.$$"
env

$SCRIPTSdir/exrrfs_bufrsnd.sh \
  cdate="${CDATE}" \
  INPUT_DATA="${INPUT_DATA}" \
  NWGES_DIR="${NWGES_DIR}" \
  fhr="${fhr}" \
  tmmark="${TMMARK}" \
  cycle_type="${CYCLE_TYPE}"
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

if [ "${KEEPDATA}" = "NO" ]; then
  rm -rf ${DATA}
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"

#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------

{ restore_shell_opts; } > /dev/null 2>&1

