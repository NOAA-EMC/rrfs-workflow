#!/bin/bash
 
#-----------------------------------------------------------------------
# RRFS Make LBCs
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Source the variable definitions file and the bash utility functions.
#-----------------------------------------------------------------------

. ${GLOBAL_VAR_DEFNS_FP}
. $USHdir/source_util_funcs.sh

date
export PS4='+ $SECONDS + '

#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------

{ save_shell_opts; set -u -x; } > /dev/null 2>&1

#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )

#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that generates lateral boundary 
condition (LBC) files (in NetCDF format) for all LBC update hours (except 
hour zero). 
========================================================================"

#-----------------------------------------------------------------------
# Set the parameters for the external model files.
#-----------------------------------------------------------------------

extrn_mdl_name="${EXTRN_MDL_NAME}"
sysbasedir="${EXTRN_MDL_SYSBASEDIR_LBCS}"
gfs_file_fmt="${GFS_FILE_FMT_LBCS}"
extrn_mdl_memhead="${GEFS_INPUT_SUBDIR}"
time_offset_hrs="${EXTRN_MDL_LBCS_OFFSET_HRS}"
lbs_spec_intvl_hrs="${LBC_SPEC_INTVL_HRS}"
lbc_spec_fhrs=( "" )
boundary_len_hrs="${BOUNDARY_LEN}"

hh=${CDATE:8:2}
yyyymmdd=${CDATE:0:8}
cdate=$( date --utc --date "${yyyymmdd} ${hh} UTC - ${time_offset_hrs} hours" "+%Y%m%d%H" )
extrn_mdl_cdate="$cdate"

# Starting year, month, day, and hour of the external model forecast.
yyyy=${cdate:0:4}
mm=${cdate:4:2}
dd=${cdate:6:2}
hh=${cdate:8:2}
mn="00"
yyyymmdd=${cdate:0:8}

# offset is to go back to a previous cycle (for example 3-h) and
# use the forecast (3-h) from that cycle valid at this cycle.
# Here calculates the forecast and it is adding.
if [ "${boundary_len_hrs}" = "0" ]; then
  boundary_len_hrs=${FCST_LEN_HRS}
fi
if [ "${DO_NON_DA_RUN}" = "TRUE" ]; then
  lbc_spec_fcst_hrs=($( seq ${lbs_spec_intvl_hrs} ${lbs_spec_intvl_hrs} ${boundary_len_hrs} ))
else
  lbc_spec_fcst_hrs=($( seq 0 ${lbs_spec_intvl_hrs} ${boundary_len_hrs} ))
fi
lbc_spec_fhrs=( "${lbc_spec_fcst_hrs[@]}" )
#
# Add the temporal offset specified in time_offset_hrs (assumed to be in
# units of hours) to the the array of LBC update forecast hours to make
# up for shifting the starting hour back in time.  After this addition,
# lbc_spec_fhrs will contain the LBC update forecast hours relative to
# the start time of the external model run.
#
num_fhrs=${#lbc_spec_fhrs[@]}
for (( i=0; i<=$((num_fhrs-1)); i++ )); do
  lbc_spec_fhrs[$i]=$(( ${lbc_spec_fhrs[$i]} + time_offset_hrs ))
done

fcst_mn="00"

case "${extrn_mdl_name}" in

  "GFS")
    if [ "${DO_RETRO}" = "TRUE" ]; then
      sysdir="$sysbasedir"
    else
      sysdir="$sysbasedir/gfs.${yyyymmdd}/${hh}/atmos"
    fi
    sysdir2=""
    fcst_hhh=( $( printf "%03d " "${lbc_spec_fhrs[@]}" ) )

    if [ "${gfs_file_fmt}" = "grib2" ]; then
      prefix="gfs.t${hh}z.pgrb2.0p25.f"  
      fns_on_disk=( "${fcst_hhh[@]/#/$prefix}" )
    elif [ "${gfs_file_fmt}" = "netcdf" ]; then
      prefix="gfs.t${hh}z.atmf"
      suffix=".nc"
      fns_on_disk_tmp=( "${fcst_hhh[@]/#/${prefix}}" )
      fns_on_disk=( "${fns_on_disk_tmp[@]/%/${suffix}}" )
    fi
    ;;

  "GEFS")
    sysdir="$sysbasedir/gefs.${yyyymmdd}/${hh}/atmos/pgrb2bp5"
    sysdir2="$sysbasedir/gefs.${yyyymmdd}/${hh}/atmos/pgrb2ap5"
    fcst_hh=( $( printf "%02d " "${lbc_spec_fhrs[@]}" ) )
    prefix="${extrn_mdl_memhead}"".t${hh}z.pgrb2b.0p50.f0"
    prefix2="${extrn_mdl_memhead}"".t${hh}z.pgrb2a.0p50.f0"  
    fns_on_disk=( "${fcst_hh[@]/#/$prefix}" )
    fns_on_disk2=( "${fcst_hh[@]/#/$prefix2}" )
    ;;

  "RRFS")
    if [ "${DO_RETRO}" = "TRUE" ]; then
      sysdir="$sysbasedir"
    else
      sysdir="$sysbasedir/rrfs.${yyyymmdd}/${hh}"
    fi
    sysdir2=""
    fcst_hhh=( $( printf "%03d " "${lbc_spec_fhrs[@]}" ) )
    prefix="rrfs.t${hh}z.natlev.f"
    fns=( "${fcst_hhh[@]/#/$prefix}" )
    suffix=".grib2"
    fns_on_disk=( "${fns[@]/%/$suffix}" )
    ;;

  *)

esac

extrn_mdl_sysdir="${sysdir}"
extrn_mdl_sysdir2="${sysdir2}"
extrn_mdl_source_dir="${extrn_mdl_sysdir}"
extrn_mdl_source_dir2="${extrn_mdl_sysdir2}"
extrn_mdl_lbc_spec_fhrs_str="( "$( printf "\"%s\" " "${lbc_spec_fhrs[@]}" )")"
extrn_mdl_fns_on_disk_str="( "$( printf "\"%s\" " "${fns_on_disk[@]}" )")"
extrn_mdl_fns_on_disk_str2="( "$( printf "\"%s\" " "${fns_on_disk2[@]}" )")"

#-----------------------------------------------------------------------
# Obtain unique process id (pid) and create the run directory (DATA).
#-----------------------------------------------------------------------

export pid=${pid:-$$}
export envir=${envir:-prod}
export RUN=${RUN:-rrfs}
export jobid=${RUN}_make_lbcs_${envir}_${cyc}

export DATA=${DATAROOT}/${jobid}
mkdir -p $DATA

mkdir -p ${DATA}/tmp_LBCS_${bcgrp}
cd ${DATA}/tmp_LBCS_${bcgrp}

export lbcs_nwges_dir="${NWGES_DIR}${SLASH_ENSMEM_SUBDIR}/lbcs"
mkdir -p "${lbcs_nwges_dir}"

export pgmout="${DATA}/tmp_LBCS_${bcgrp}/OUTPUT.$$"
env

#-----------------------------------------------------------------------
# Execute the script.
#-----------------------------------------------------------------------

$SCRIPTSdir/exrrfs_make_lbcs.sh \
  use_user_staged_extrn_files="${USE_USER_STAGED_EXTRN_FILES}" \
  extrn_mdl_name="${extrn_mdl_name}" \
  extrn_mdl_cdate="${extrn_mdl_cdate}" \
  extrn_mdl_lbc_spec_fhrs="${extrn_mdl_lbc_spec_fhrs_str}" \
  extrn_mdl_fns_on_disk="${extrn_mdl_fns_on_disk_str}" \
  extrn_mdl_fns_on_disk2="${extrn_mdl_fns_on_disk_str2}" \
  extrn_mdl_source_dir="${extrn_mdl_source_dir}" \
  extrn_mdl_source_dir2="${extrn_mdl_source_dir2}" \
  extrn_mdl_staging_dir="${DATA}/tmp_LBCS_${bcgrp}" \
  bcgrp="${bcgrp}" \
  bcgrpnum="${bcgrpnum}"
export err=$?; err_chk

if [ -e "$pgmout" ]; then
  cat $pgmout
fi

if [ "${KEEPDATA}" = "NO" ]; then
  rm -rf ${DATA}
fi

#-----------------------------------------------------------------------
# Print exit message.
#-----------------------------------------------------------------------

print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"

#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------

{ restore_shell_opts; } > /dev/null 2>&1

