#!/usr/bin/env python
#
import os
import sys
#


def list_to_delimited_string(lst, spaces='  ', delimiter=', ', elements_per_line=20):
    # Convert the list to a comma-separated string with the specified delimiter
    joined_string = delimiter.join(map(str, lst))
    # Split the joined string into chunks of elements_per_line
    elements = joined_string.split(delimiter)
    # Create lines of up to elements_per_line elements
    lines = [delimiter.join(elements[i:i + elements_per_line]) for i in range(0, len(elements), elements_per_line)]
    # Add a comma at the end of each line except the last line
    formatted_lines = [spaces + line + delimiter.rstrip(' ') if i < len(lines) - 1 else spaces + line for i, line in enumerate(lines)]
    # formatted_lines[0] = formatted_lines[0].lstrip(' ')
    return formatted_lines


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# get command line inputs
#
args = sys.argv
nargs = len(args) - 1
if nargs < 1:
    print(f"{args[0]} [yaml_file]\n")
    exit()

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# read the iuse information from convinfo for conventional observations
#
dcConvInfo = {}
if os.path.exists('convinfo'):
    with open('convinfo', 'r') as sfile:
        for line in sfile:
            if not line.strip().startswith("!"):
                fields = line.split()
                if len(fields) == 9:
                    atype = fields[0]
                    if fields[1] != '0':
                        atype += fields[1].zfill(3)
                    if fields[2] != '0':
                        atype += "_" + fields[2].zfill(3)
                    #
                    dcTMP = {
                        'iuse': fields[3],
                        'twindow': fields[4],
                        'gross': fields[5],
                        'ermax': fields[6],
                        'ermin': fields[7],
                        'msgtype': fields[8],
                    }
                    dcConvInfo[atype] = dcTMP
                else:
                    print(f"read_convinfo Warning: expected 9 fields\n{line}")

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# read satinfo
#
dcSatInfo = {}
if os.path.exists('satinfo'):
    with open('satinfo', 'r') as sfile:
        for line in sfile:
            if not line.strip().startswith("!"):
                fields = line.split()
                if len(fields) == 11:
                    sis = fields[0]  # sensor/instr/sat
                    if sis in dcSatInfo:
                        dcSIS = dcSatInfo[sis]
                    else:
                        dcSIS = {'channels': [], 'use_flag': [], 'error': [], 'error_cld': [], 'obserr_bound_max': [],
                                 'var_b': [], 'var_pg': [], 'use_flag_clddet': [], 'icloud': [], 'iaerosol': [],
                                 }
                    #
                    dcSIS['channels'].append(fields[1])
                    dcSIS['use_flag'].append(fields[2])
                    dcSIS['error'].append(fields[3])
                    dcSIS['error_cld'].append(fields[4])
                    dcSIS['obserr_bound_max'].append(fields[5])
                    dcSIS['var_b'].append(fields[6])
                    dcSIS['var_pg'].append(fields[7])
                    dcSIS['use_flag_clddet'].append(fields[8])
                    dcSIS['icloud'].append(fields[9])
                    dcSIS['iaerosol'].append(fields[10])
                    dcSatInfo[sis] = dcSIS
                else:
                    print(f"read_satinfo warning: expected 11 fields\n{line}")

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# generate the final use_obs list
# ~~~~~~~~~~~~~
# assemble a final conventional obs use list
conv_list = []
for key,value in dcConvInfo.items():
    if value['iuse'] == "1":
        conv_list.append(key)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# if both conv_list and dcSatInfo are empty, print a warning message
#
if not conv_list and not dcSatInfo:
    print("WARNING: no convinfo/satinfo, or empty/corrupt convinfo/satinfo")
elif not conv_list:
    print("INFO: no convinfo, or empty/corrupt convinfo")
elif not dcSatInfo:
    print("INFO: no satinfo, or empty/corrupt satinfo")

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# generate the yaml file on the fly
#
yfile = args[1]
basename = yfile.rstrip(".yaml")
yfile2 = basename + "_old001.yaml"
#
# find an available file name and backup the old yaml file
if os.path.exists(yfile2):
    knt = 1
    yfile2 = f'{basename}_old{knt:03}.yaml'
    while os.path.exists(yfile2):
        knt += 1
        yfile2 = f'{basename}_old{knt:03}.yaml'
os.replace(yfile, yfile2)
#
with open(yfile2, 'r') as infile, open(yfile, 'w') as outfile:
    buffer_zone = []
    in_buffer_zone = False
    just_read_new_obs_space = False
    use_obs = False
    anchor_skip_old_values = False
    #
    for line in infile:
        if "obs space:" in line:
            # just read a new obs space, need to process buffer_zone
            if in_buffer_zone:
                # Write out the buffer zone if not moreve_obs
                if use_obs:
                    for buf_line in buffer_zone:
                        outfile.write(buf_line)
                # Reset buffer and state tracking
                buffer_zone = []
                in_buffer_zone = False
                use_obs = False
                anchor_skip_old_values = False
            # ~~~~~
            just_read_new_obs_space = True
            in_buffer_zone = True
            buffer_zone.append(line)
        elif just_read_new_obs_space and "name" in line:
            just_read_new_obs_space = False
            buffer_zone.append(line)
            for obs in conv_list:
                if obs in line and obs not in ["dw", "srw", "rw"]:
                    use_obs = True
                    break
            # ~~~~~~
            if not use_obs:  # check whether it is a satellite observation
                for obs in dcSatInfo:
                    if obs in line:
                        use_obs = True
                        break

        elif "_anchor_" in line:
            if not use_obs:  # use_obs is determined after the above `if` and `elif`
                # print("found a sat anchor, but the SIS is not in 'satinfo' or empty/corrupt 'satinfo'")
                continue
            if "_anchor_channels:" in line:
                anchor_name = "channels"
            elif "_anchor_use_flag_clddet:" in line:  # process _anchor_use_flag_clddet before _anchor_use_flag
                anchor_name = "use_flag_clddet"
            elif "_anchor_use_flag:" in line:
                anchor_name = "use_flag"
            elif "_anchor_error:" in line:
                anchor_name = "error"
            elif "_anchor_obserr_bound_max:" in line:
                anchor_name = "obserr_bound_max"
            mysis = line.split('&')[1].strip().split(' ', 1)[0].strip()[:-len(f'{anchor_name}_')]  # get the SIS id
            nSpaces = len(line) - len(line.lstrip())
            spaces = " "*nSpaces
            pre_spaces = spaces + "    " #  add extra 4 spaces for anchor values
            tmp_str = list_to_delimited_string(dcSatInfo[mysis][anchor_name], pre_spaces)
            new_str = '\n'.join(map(str, tmp_str))
            if anchor_name == "channels":
                values = f"\n{new_str}"
            else:
                values = f" [\n{new_str}]"
            line = f"{spaces}_anchor_{anchor_name}: &{mysis}_{anchor_name}{values}\n"
            anchor_skip_old_values = True
            buffer_zone.append(line)
        elif anchor_skip_old_values:
            if "distribution:" in line:
                anchor_skip_old_values = False
                buffer_zone.append(line)
        elif in_buffer_zone:
            buffer_zone.append(line)

        if not in_buffer_zone:
            outfile.write(line)
    # ~~~~
    if buffer_zone:
        if use_obs:
            for buf_line in buffer_zone:
                outfile.write(buf_line)
# ~~~~~~~~
