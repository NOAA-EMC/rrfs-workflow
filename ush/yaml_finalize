#!/usr/bin/env python
import os
import sys
import hifiyaml4rrfs as hy
import yamltools4rrfs as yt

args = sys.argv
nargs = len(args) - 1
if nargs < 1:
    sys.stderr.write("yamlfinalize <jedivar.yaml|getkf.yaml|hofx.yaml|test.yaml>\n")
    sys.exit(1)
yfile = args[1]
ytype = yfile.rsplit(".", 1)[0]  # remove the suffix

# get environmental variables
analysisDate = os.getenv("analysisDate", "analysisDate_NOT_DEFINED")
beginDate = os.getenv("beginDate", "beginDate_NOT_DEFINED")
HYB_WGT_STATIC = os.getenv("HYB_WGT_STATIC", "1.0")
HYB_WGT_ENS = os.getenv("HYB_WGT_ENS", "0.0")
start_type = os.getenv("start_type", "start_type_NOT_DEFINED")
GETKF_TYPE = os.getenv("GETKF_TYPE", "TYPE_NOT_DEFINED")
use_conv_sat_info = (os.getenv("USE_CONV_SAT_INFO", "True").upper() != "FALSE")

# replacements for the @VAR@ patterns
replacements = {
    "analysisDate": f"{analysisDate}",
    "beginDate": f"{beginDate}",
    "HYB_WGT_STATIC": f"{HYB_WGT_STATIC}",
    "HYB_WGT_ENS": f"{HYB_WGT_ENS}",
}

# load the YAML data and complete the pattern replacement
data = hy.load(yfile, replacements)

# modify BEC models for jedivar
if ytype == "jedivar":
    if float(HYB_WGT_STATIC) == 0.0:
        # remove the static BEC component, yield a pure 3DEnVar
        querystr = "cost function/background error/components/0"
        hy.drop(data, querystr)
    if float(HYB_WGT_ENS) == 0.0:
        # remove the ensemble BEC component, yield a pure 3DVar
        querystr = "cost function/background error/components/1"
        hy.drop(data, querystr)

# modify variable list if do_radar_ref
do_radar_ref = (os.getenv("DO_RADAR_REF", "FASLE").upper() == "TRUE")
if do_radar_ref and ytype == "jedivar":
    varlist = "state variables: &incvars [water_vapor_mixing_ratio_wrt_moist_air, air_pressure_at_surface, air_temperature, northward_wind, eastward_wind, cloud_liquid_water, cloud_liquid_ice, rain_water, snow_water, graupel, equivalent_reflectivity_factor, upward_air_velocity]"
    hy.modify(data, "_member/state variables", varlist)
    pos, _ = hy.get_start_pos(data, "cost function/background/state variables")
    next_one = hy.next_pos(data, pos)
    spaces = " " * hy.strip_indentations(data[next_one - 1])[0]
    extra_vars = [f"{spaces}- equivalent_reflectivity_factor", f"{spaces}- w", f"{spaces}- upward_air_velocity"]
    data[next_one:next_one] = extra_vars  # insert new variables to the list

elif do_radar_ref and ytype == "getkf":
    varlist = "increment variables: [air_temperature, water_vapor_mixing_ratio_wrt_moist_air, eastward_wind, northward_wind, air_pressure_at_surface, cloud_liquid_water, cloud_liquid_ice, rain_water, snow_water, graupel, equivalent_reflectivity_factor, upward_air_velocity]"
    hy.modify(data, "increment variables", varlist)
    pos, _ = hy.get_start_pos(data, "_member/state variables")
    next_one = hy.next_pos(data, pos)
    spaces = " " * hy.strip_indentations(data[next_one - 1])[0]
    extra_vars = [f"{spaces}- equivalent_reflectivity_factor", f"{spaces}- w", f"{spaces}- upward_air_velocity"]
    data[next_one:next_one] = extra_vars  # insert new variables to the list

# tweaks for cold start DA
if ytype == "jedivar" and start_type == "cold":
    hy.modify(data, "output/filename", "filename: ana.nc")
    hy.modify(data, "cost function/background/filename", "filename: ana.nc")
elif ytype == "getkf" and start_type == "cold":
    hy.modify(data, "output/filename", "filename: ./data/ana/mem%{member}%.nc")

# tweaks getkf.yaml from the observer mode to the solver mode
need_getkf_solver = False
solver_driver_str = '''
driver:
  read HX from disk: true
  save posterior ensemble: true
  save prior mean: true
  save posterior mean: true
  do posterior observer: false
'''
if ytype == "getkf" and (GETKF_TYPE == "solver" or GETKF_TYPE == "post"):
    need_getkf_solver = True
    block = hy.text_to_yblock(solver_driver_str)
    hy.modify(data, "driver", block)

# keep/drop/passivate observations based on convifo/satinfo
use_conv_sat_info = True
if use_conv_sat_info:
    dcConvInfo = yt.load_convinfo()
    dcSatInfo = yt.load_satinfo()
    if not dcConvInfo:
        sys.stderr.write("INFO: no convinfo, or empty/corrupt convinfo\n")
    if not dcSatInfo:
        sys.stderr.write("INFO: no satinfo, or empty/corrupt satinfo\n")

    # get the YAML head section
    head_end, _ = hy.get_start_pos(data, "observations/observers")
    output = data[0:head_end + 1]
    # assemble observers
    dcObs = yt.get_all_obs(data, shallow=True)
    for name, observer in dcObs.items():
        sname = observer["sname"]
        tmp = data[observer["pos1"]:observer["pos2"]]  # a shallow copy when slicing
        if need_getkf_solver:
            yt.convert_observer_to_solver(tmp)
        if observer["is_sat_radiance"]:  # check against satinfo
            for sis, info in dcSatInfo.items():
                if sis == sname:
                    yt.update_sat_anchors(tmp, dcSatInfo)
                    output.extend(tmp)
                    break
        else:  # check against convinfo
            for iname, info in dcConvInfo.items():
                if iname == sname:
                    if info['iuse'] != "0":  # assimilate or monitor
                        if info['iuse'] == "-1":   # monitor, need to insert a passivate filter
                            for i in range(len(tmp)):
                                if "obs filters:" in tmp[i]:
                                    spaces = " " * (hy.strip_indentations(tmp[i])[0] + 2)  # default to 2 extra indentations
                                    passivate = [
                                        f"{spaces}- filter: Perform Action",
                                        f"{spaces}  action:",
                                        f"{spaces}    name: passivate",
                                        "",
                                    ]
                                    tmp[i + 1:i + 1] = passivate  # insert the passivate filter
                                    break
                        output.extend(tmp)
                    # ~~~~~~~
                    break

else:  # skip convinfo/satinfo
    output = data

# find an available file name to backup the old yaml file
yfile2 = ytype + "_old001.yaml"
if os.path.exists(yfile2):
    knt = 1
    yfile2 = f'{ytype}_old{knt:03}.yaml'
    while os.path.exists(yfile2):
        knt += 1
        yfile2 = f'{ytype}_old{knt:03}.yaml'
os.replace(yfile, yfile2)  # move yfile to yfile2
# dump the final YAML file
hy.dump(output, fpath=yfile)
sys.exit(0)
